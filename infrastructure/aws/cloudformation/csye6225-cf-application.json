{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloud formation template to create application stack",
  "Parameters": {
    "NetworkStackNameParameter": {
      "Description": "Name of the Network Stack",
      "Type": "String"
    },
    "AMIid": {
      "Description": "AMI ID",
      "Type": "String"
    },
    "StackName": {
      "Description": "Application Stack Name",
      "Type": "String"
    },
    "KeyName": {
      "Description": "EC2 Key Name",
      "Type": "String"
    },
    "DBName": {
      "Default": "csye6225",
      "Description": "MySQL RDS DB Name",
      "Type": "String"
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of DB in GB",
      "Type": "Number"
    },
    "DBClass": {
      "Default": "db.t2.medium",
      "Description": "Database instance class",
      "Type": "String"
    },
    "DBUsername": {
      "Default": "csye6225master",
      "Description": "The database admin account username",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
    },
    "DBPassword": {
      "Default": "csye6225password",
      "Description": "The database admin account password",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9]*"
    },
    "AwsAccountID": {
      "Description": "Account ID",
      "Type": "String"
    },
    "ApplicationName": {
      "Description": "Name of the webapp to be deployed",
      "Type": "String"
    },
    "AwsRegion": {
      "Description": "Aws Region",
      "Type": "String"
    },
    "AttachmentsBucketName": {
      "Description": "Attachments bucket name",
      "Type": "String"
    },
    "CDBucketName": {
      "Description": "Code deploy bucket name",
      "Type": "String"
    },
    "FunctionName": {
      "Type": "String"
    },
    "LambdaRole": {
      "Type": "String"
    },
    "DomainName": {
      "Type": "String"
    },
    "SNSTopic": {
      "Type": "String"
    }
  },
  "Resources": {
    "webappSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "rule to allow TCP traffic on port 22, 80 and 443 from anywhere in the world",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-sgwebapp",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-VpcID"
          }
        }
      }
    },
    "dbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "rule to allow TCP traffic on port 3306 for MySQL only from the webapp security group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": {
              "Ref": "webappSecurityGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-rdssg",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-VpcID"
          }
        }
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "csye6225",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": "TRUE"
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-dynamodb",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkStackNameParameter}-SubnetEC2"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${NetworkStackNameParameter}-SubnetDB"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-dbsubnetgrp",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "DBInstanceClass": {
          "Ref": "DBClass"
        },
        "Engine": "MySQL",
        "EngineVersion": "5.6.35",
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "dbSecurityGroup"
          }
        ],
        "DBInstanceIdentifier": "csye6225-spring2019",
        "MultiAZ": false,
        "PubliclyAccessible": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-rds",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "CodeDeployEC2S3UserPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "This policy allows EC2 instances to get data from S3 buckets",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${BUCKET_NAME}",
                    {
                      "BUCKET_NAME": {
                        "Ref": "CDBucketName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${BUCKET_NAME}/*",
                    {
                      "BUCKET_NAME": {
                        "Ref": "CDBucketName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${BUCKET_NAME}/*",
                    {
                      "BUCKET_NAME": {
                        "Ref": "AttachmentsBucketName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${BUCKET_NAME}/*",
                    {
                      "BUCKET_NAME": {
                        "Ref": "AttachmentsBucketName"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        "ManagedPolicyName": "CodeDeploy-EC2-S3"
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": "CodeDeployEC2ServiceRole",
        "ManagedPolicyArns": [
          {
            "Ref": "CodeDeployEC2S3UserPolicy"
          },
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        ]
      }
    },
    "EC2SNSPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "Publish-EC2-SNS",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish",
                "sns:ListTopics"
              ],
              "Resource": [
                {
                  "Ref": "SNSTopic"
                },
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "Path": "/"
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "DeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApplication"
        },
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "AutoRollbackConfiguration": {
          "Enabled": "true",
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "Ec2TagFilters": [
          {
            "Key": "code-deploy",
            "Value": "code-deploy-ec2",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "AMIid"
        },
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": "20",
              "VolumeType": "gp2"
            }
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "webappSecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${NetworkStackNameParameter}-SubnetEC2"
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${StackName}-csye6225-ec2",
                {
                  "StackName": {
                    "Ref": "StackName"
                  }
                }
              ]
            }
          },
          {
            "Key": "code-deploy",
            "Value": "code-deploy-ec2"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe",
                "sudo bash",
                "sudo systemctl stop tomcat.service",
                "cd /usr/lib/systemd/system",
                {
                  "Fn::Join": [
                    "",
                    [
                      "sudo sed -i 's|Environment=\"JAVA_OPTS=-Djava.awt.headless=true ",
                      "-Djava.security.egd=file:/dev/./urandom\"|",
                      "Environment=\"JAVA_OPTS=-Xms512M -Xmx1024M -Djava.awt.headless=true ",
                      "-Djava.security.egd=file:/dev/./urandom -Dspring.datasource.username=csye6225master ",
                      "-Dspring.datasource.password=csye6225password -Dspring.profiles.active=dev ",
                      "-Dspring.datasource.url=jdbc:mysql://",
                      {
                        "Fn::GetAtt": [
                          "RDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":3306/csye6225 -Dspring.bucket.name=",
                      {
                        "Ref": "AttachmentsBucketName"
                      },
                      "\"|g' /usr/lib/systemd/system/tomcat.service"
                    ]
                  ]
                },
                "sudo systemctl daemon-reload",
                "sudo systemctl restart tomcat.service"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "EC2InstanceProfile",
        "RDSInstance"
      ]
    },
    "ResetPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "exports.handler = function(event, context, callback) {",
                "  console.log('Function is working');",
                "  return 'Its working';",
                "};"
              ]
            ]
          }
        },
        "Environment": {
          "Variables": {
            "DOMAIN": {
              "Ref": "DomainName"
            }
          }
        },
        "FunctionName": {
          "Ref": "FunctionName"
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Ref": "LambdaRole"
        },
        "Runtime": "nodejs8.10"
      }
    },
    "ResetPasswordTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "ResetPasswordLambdaFunction",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ],
        "TopicName": "password_reset"
      },
      "DependsOn": [
        "ResetPasswordLambdaFunction"
      ]
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ResetPasswordTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ResetPasswordLambdaFunction",
            "Arn"
          ]
        }
      }
    }
  }
}